<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzti.epa.mapper.baseinfo.CourseMapper" >
  <resultMap id="BaseResultMap" type="com.zzti.epa.model.Course" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="term" property="term" jdbcType="VARCHAR" />
    <result column="classId" property="classId" jdbcType="INTEGER" />
    <result column="majorId" property="majorId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="CourseWithClass" type="map" extends="BaseResultMap">

      <result column="className" property="className" jdbcType="VARCHAR"/>

  </resultMap>

  <select id="getAllCourse" resultType="com.zzti.epa.model.Course">
    select * from course c where id in (select max(id) from course group by name)
    <if test="classId!=null">
      and c.classId=#{classId}
    </if>
  </select>
  <select id="getCourseById" resultType="com.zzti.epa.model.Course">
    select * from course where course.id=#{id};
  </select>

  <!--<select id="getCourse"  resultType="com.zzti.epa.model.Course">
    select * from course c where id in (select max(id) from course group by name)
    <where>
      <if test="course.name!=null and course.name!=''">
        and c.name like concat('%',#{course.name},'%')
      </if>
      <if test="course.classId!=null">
        and c.classId=#{course.classId}
      </if>
    </where>
    <if test="page !=null and size!=null">
      limit #{page},#{size}
    </if>
  </select>-->
  <select id="getCourse" resultType="com.zzti.epa.model.Course">
    select * from course c
    <where>
      <if test="course.name!=null and course.name!=''">
        and c.name like concat('%',#{course.name},'%')
      </if>
      <if test="course.majorId!=null">
        and c.majorId= #{course.majorId}
      </if>
      <if test="course.classId!=null">
        and c.id in(select courseId from class_course where classId =#{course.classId})
      </if>
    </where>
    <if test="page !=null and size!=null">
      limit #{page},#{size}
    </if>
  </select>
  <!--三表联查，多对多关系-->
  <select id="getCourseWithClass" resultMap="CourseWithClass">
    select t2.*,t3.name as className, t3.schoolId as schoolId from (class_course t1 INNER JOIN course t2 on t1.courseId =t2.id)
    INNER JOIN class t3 on t1.classId=t3.id

    <where>
      <if test="course.name!=null and course.name!=''">
        and t2.name like concat('%',#{course.name},'%')
      </if>
      <if test="course.majorId!=null">
        and t2.majorId= #{course.majorId}
      </if>
      <if test="course.classId!=null">
        and t3.id =#{course.classId}
      </if>
    </where>
    order by t3.name
    <if test="page !=null and size!=null">
      limit #{page},#{size}
    </if>
  </select>
  <!-- select count(*) from course c where id in (select max(id) from course group by name)-->
  <select id="getTotal" resultType="Long">
    select count(*) from (class_course t1 INNER JOIN course t2 on t1.courseId =t2.id)
    INNER JOIN class t3 on t1.classId=t3.id
    <where>
      <if test="course!=null">
        <if test="course.name!=null and course.name!=''">
          and t2.name like concat('%',#{course.name},'%')
        </if>
        <if test="course.majorId!=null">
          and t2.majorId= #{course.majorId}
        </if>
        <if test="course.classId!=null">
          and t3.id =#{course.classId}
        </if>
      </if>
    </where>

  </select>











  <sql id="Base_Column_List" >
    id, name, term, classId,majorId
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from course
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from course
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zzti.epa.model.Course" useGeneratedKeys="true" keyProperty="id" >
    insert into course (id, name, term, 
      classId,majorId)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{term,jdbcType=VARCHAR}, 
      #{classId,jdbcType=INTEGER},#{majorId,jdbcType=INTEGER}))
  </insert>
  <insert id="insertSelective" parameterType="com.zzti.epa.model.Course" useGeneratedKeys="true" keyProperty="id" >
    insert into course
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="term != null" >
        term,
      </if>
      <if test="classId != null" >
        classId,
      </if>
      <if test="majorId != null" >
        majorId
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="term != null" >
        #{term,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="majorId != null" >
        #{majorId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzti.epa.model.Course" >
    update course
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="term != null" >
        term = #{term,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        classId = #{classId,jdbcType=INTEGER},
      </if>
      <if test="majorId != null" >
        majorId = #{majorId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzti.epa.model.Course" >
    update course
    set name = #{name,jdbcType=VARCHAR},
      term = #{term,jdbcType=VARCHAR},
      classId = #{classId,jdbcType=INTEGER},
       majorId = #{majorId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>